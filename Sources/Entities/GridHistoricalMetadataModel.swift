// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GridHistoricalMetadataModel: Codable {
    public var title: String
    public var parameters: [ParameterMetadataModel]
    public var frequency: String
    public var type: String
    public var mode: String
    /// Example: ["geojson", "netcdf"]
    public var responseFormats: [String]
    public var startTime: Date
    public var endTime: Date
    public var bbox: [Double]
    public var bboxOuter: [Double]
    /// Example: 1000
    public var spatialResolutionM: Int
    /// Example: "EPSG:4326"
    public var crs: String
    public var gridBounds: [Double]

    public init(title: String, parameters: [ParameterMetadataModel], frequency: String, type: String, mode: String, responseFormats: [String], startTime: Date, endTime: Date, bbox: [Double], bboxOuter: [Double], spatialResolutionM: Int, crs: String, gridBounds: [Double]) {
        self.title = title
        self.parameters = parameters
        self.frequency = frequency
        self.type = type
        self.mode = mode
        self.responseFormats = responseFormats
        self.startTime = startTime
        self.endTime = endTime
        self.bbox = bbox
        self.bboxOuter = bboxOuter
        self.spatialResolutionM = spatialResolutionM
        self.crs = crs
        self.gridBounds = gridBounds
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.title = try values.decode(String.self, forKey: "title")
        self.parameters = try values.decode([ParameterMetadataModel].self, forKey: "parameters")
        self.frequency = try values.decode(String.self, forKey: "frequency")
        self.type = try values.decode(String.self, forKey: "type")
        self.mode = try values.decode(String.self, forKey: "mode")
        self.responseFormats = try values.decode([String].self, forKey: "response_formats")
        self.startTime = try values.decode(Date.self, forKey: "start_time")
        self.endTime = try values.decode(Date.self, forKey: "end_time")
        self.bbox = try values.decode([Double].self, forKey: "bbox")
        self.bboxOuter = try values.decode([Double].self, forKey: "bbox_outer")
        self.spatialResolutionM = try values.decode(Int.self, forKey: "spatial_resolution_m")
        self.crs = try values.decode(String.self, forKey: "crs")
        self.gridBounds = try values.decode([Double].self, forKey: "grid_bounds")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(title, forKey: "title")
        try values.encode(parameters, forKey: "parameters")
        try values.encode(frequency, forKey: "frequency")
        try values.encode(type, forKey: "type")
        try values.encode(mode, forKey: "mode")
        try values.encode(responseFormats, forKey: "response_formats")
        try values.encode(startTime, forKey: "start_time")
        try values.encode(endTime, forKey: "end_time")
        try values.encode(bbox, forKey: "bbox")
        try values.encode(bboxOuter, forKey: "bbox_outer")
        try values.encode(spatialResolutionM, forKey: "spatial_resolution_m")
        try values.encode(crs, forKey: "crs")
        try values.encode(gridBounds, forKey: "grid_bounds")
    }
}
