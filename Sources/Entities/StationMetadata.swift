// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct StationMetadata: Codable {
    /// Example: "INDIVIDUAL"
    public var type: StationMetadataType
    /// Example: 5904
    public var id: String
    /// Example: 105
    public var groupID: String?
    /// Example: "WIEN-HOHE WARTE"
    public var name: String
    /// Example: "Wien"
    public var state: Bundesland?
    /// Example: 48.248611
    public var lat: Double
    /// Example: 16.356388
    public var lon: Double
    /// Example: 198.0
    public var altitude: Double?
    /// Example: "1992-11-05T00:00:00"
    public var validFrom: Date
    /// Example: "2100-12-31T00:00:00"
    public var validTo: Date
    /// Example: true
    public var hasSunshine: Bool?
    /// Example: true
    public var hasGlobalRadiation: Bool?
    /// Example: true
    public var isActive: Bool?

    public init(type: StationMetadataType, id: String, groupID: String? = nil, name: String, state: Bundesland? = nil, lat: Double, lon: Double, altitude: Double? = nil, validFrom: Date, validTo: Date, hasSunshine: Bool? = nil, hasGlobalRadiation: Bool? = nil, isActive: Bool? = nil) {
        self.type = type
        self.id = id
        self.groupID = groupID
        self.name = name
        self.state = state
        self.lat = lat
        self.lon = lon
        self.altitude = altitude
        self.validFrom = validFrom
        self.validTo = validTo
        self.hasSunshine = hasSunshine
        self.hasGlobalRadiation = hasGlobalRadiation
        self.isActive = isActive
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(StationMetadataType.self, forKey: "type")
        self.id = try values.decode(String.self, forKey: "id")
        self.groupID = try values.decodeIfPresent(String.self, forKey: "group_id")
        self.name = try values.decode(String.self, forKey: "name")
        self.state = try values.decodeIfPresent(Bundesland.self, forKey: "state")
        self.lat = try values.decode(Double.self, forKey: "lat")
        self.lon = try values.decode(Double.self, forKey: "lon")
        self.altitude = try values.decodeIfPresent(Double.self, forKey: "altitude")
        self.validFrom = try values.decode(Date.self, forKey: "valid_from")
        self.validTo = try values.decode(Date.self, forKey: "valid_to")
        self.hasSunshine = try values.decodeIfPresent(Bool.self, forKey: "has_sunshine")
        self.hasGlobalRadiation = try values.decodeIfPresent(Bool.self, forKey: "has_global_radiation")
        self.isActive = try values.decodeIfPresent(Bool.self, forKey: "is_active")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(groupID, forKey: "group_id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(state, forKey: "state")
        try values.encode(lat, forKey: "lat")
        try values.encode(lon, forKey: "lon")
        try values.encodeIfPresent(altitude, forKey: "altitude")
        try values.encode(validFrom, forKey: "valid_from")
        try values.encode(validTo, forKey: "valid_to")
        try values.encodeIfPresent(hasSunshine, forKey: "has_sunshine")
        try values.encodeIfPresent(hasGlobalRadiation, forKey: "has_global_radiation")
        try values.encodeIfPresent(isActive, forKey: "is_active")
    }
}
