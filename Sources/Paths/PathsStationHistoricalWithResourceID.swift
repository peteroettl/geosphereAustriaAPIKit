// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Station.Historical {
    public func resourceID(_ resourceID: String) -> WithResourceID {
        WithResourceID(path: "\(path)/\(resourceID)")
    }

    public struct WithResourceID {
        /// Path: `/station/historical/{resource_id}`
        public let path: String

        /// Historical Station Data
        public func get(parameters: GetParameters) -> Request<geosphereAustriaAPIKit.StationGeoJSONSerializer> {
            Request(path: path, method: "GET", query: parameters.asQuery, id: "Historical_Station_Data_station_historical__resource_id__get")
        }

        public struct GetParameters {
            /// At least one parameter has to be specified.
            public var parameters: [String]
            /// Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
            public var start: Start
            /// Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
            public var end: End
            /// At least one station id has to be specified.
            public var stationIDs: [String]
            public var outputFormat: OutputFormat?
            /// Filename without file extension
            public var filename: String?

            /// Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
            public struct Start: Codable {
                public var string: String?
                public var date: Date?

                public init(string: String? = nil, date: Date? = nil) {
                    self.string = string
                    self.date = date
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(string, forKey: "string")
                    encoder.encode(date, forKey: "date")
                    return encoder.items
                }
            }

            /// Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
            public struct End: Codable {
                public var string: String?
                public var date: Date?

                public init(string: String? = nil, date: Date? = nil) {
                    self.string = string
                    self.date = date
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(string, forKey: "string")
                    encoder.encode(date, forKey: "date")
                    return encoder.items
                }
            }

            public enum OutputFormat: String, Codable, CaseIterable {
                case geojson
                case csv
            }

            public init(parameters: [String], start: Start, end: End, stationIDs: [String], outputFormat: OutputFormat? = nil, filename: String? = nil) {
                self.parameters = parameters
                self.start = start
                self.end = end
                self.stationIDs = stationIDs
                self.outputFormat = outputFormat
                self.filename = filename
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(parameters, forKey: "parameters")
                encoder.encode(start, forKey: "start")
                encoder.encode(end, forKey: "end")
                encoder.encode(stationIDs, forKey: "station_ids")
                encoder.encode(outputFormat, forKey: "output_format")
                encoder.encode(filename, forKey: "filename")
                return encoder.items
            }
        }
    }
}
